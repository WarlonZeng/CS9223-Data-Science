sesSSE[2] <- ses0.1$model$SSE
sesSSE[3] <- ses0.2$model$SSE
sesSSE[4] <- ses0.3$model$SSE
sesSSE[5] <- ses0.4$model$SSE
sesSSE[6] <- ses0.5$model$SSE
sesSSE[7] <- ses0.6$model$SSE
sesSSE[8] <- ses0.7$model$SSE
sesSSE[9] <- ses0.8$model$SSE
sesSSE[10] <- ses0.9$model$SSE
sesSSE[11] <- ses1$model$SSE
plot(sesAlpha, sesSSE, type="o", col="black", xlab="Alpha", ylab="SSE")
# Chunk 10: optimal_alpha
# optimal alpha vs. Part B
jojoSESOptimalAlpha <- ses(jojo, initial="simple", alpha=NULL, h=4)
jojoSESAlpha01
jojoSESAlpha05
jojoSESAlpha50
jojoSESAlpha95
jojoSESAlpha99
jojoSESOptimalAlpha
# Chunk 11: optimal_initial
# optimal initial
jojoSESOptimalInitial <- ses(jojoTS, initial="optimal", alpha=NULL, h=4)
jojoSESOptimalAlpha
jojoSESOptimalInitial
# Chunk 12: acf pacf
# acf & pacf
jojoNormalDiff <- diff(jojoTS)
acf(jojoNormalDiff, xlab="LAG, Quarterly Earnings per Share")
pacf(jojoNormalDiff, xlab="LAG, Quarterly Earnings per Share")
#acf2(jojoManualDiff, xlab="LAG, Quarterly Earnings per Share")
# Chunk 13: arima
# fit arima
jojoARIMA <- arima(jojoTS, order=c(1,1,2))
jojoARIMA2 <- arima(jojoTS, order=c(1,1,1))
jojoARIMA3 <- arima(jojoTS, order=c(2,1,1))
jojoARIMA4 <- arima(jojoTS, order=c(2,1,2))
jojoARIMA
jojoARIMA2
jojoARIMA3
jojoARIMA4
# Chunk 14: residuals
# plot residuals
tsdiag(jojoARIMA)
plot(jojoARIMA$residuals, type="p")
acf(jojoNormalDiff)
acf(jojoARIMA$residuals)
pacf(jojoNormalDiff)
pacf(jojoARIMA$residuals)
# Chunk 15: predict
# predict given and my own
jojoARIMAGiven <- arima(jojoTS, order=c(1,0,1), method="ML") # 1,0,1
jojoARIMAPredictGiven <- arima(jojoARIMAPredictGiven)
jojoARIMAPredictGiven
jojoARIMAPredict <- arima(jojoARIMA) # 1,1,2
jojoARIMAPredict
# Chunk 1: setup
# libraries
library(stats)
library(tseries)
library(forecast)
library(ggplot2)
library(astsa)
library(dplyr)
# set working directory
setwd("C:/Users/Warlon/Documents/R/hw2")
# Chunk 2: plot
# load jojo data
jojo <- read.table("jojo.dat")
jojoTS <- ts(jojo, frequency = 4)
# plot it, all observations (84)
plot(1:84, jojoTS, type="o", col="black", xlab="Quarter", ylab="Quarterly Earnings per Share")
# Chunk 3: stationary
# diff, observe lag, diff lag
jojoDiff <- diff(jojoTS)
acf(jojoDiff)
jojoDiff <- diff(jojoDiff, lag=4)
acf(jojoDiff)
plot(jojoDiff, type="o", col="black", xlab="Quarter", ylab="Quarterly Earnings per Share")
# another way, source: https://anomaly.io/seasonal-trend-decomposition-in-r/
#jojoTS2 <- ts(as.vector(t(jojo)), frequency=4) # make univariate
#jojoSTL <- stl(jojoTS2, "periodic")
#jojoRandom <- jojoSTL$time.series[,3] # by Loess
#acf(jojoRandom)
#plot(jojoRandom)
# Chunk 4: code
# differencing, source: https://www.otexts.org/fpp/8/1
temp <- jojoTS
jojoManualDiff = {}
for (i in 2:84) {
jojoManualDiff[i] = temp[i] - temp[i-1]
}
jojoManualDiff <- na.omit(jojoManualDiff)
acf(jojoManualDiff)
plot(jojoManualDiff, type="o", col="black", xlab="Quarter", ylab="Quarterly Earnings per Share")
# Chunk 5: acf
# acf
acf(jojoDiff)
acf(jojoManualDiff)
# Chunk 6: adf
# adf
adf.test(jojoDiff)
adf.test(jojoManualDiff)
# Chunk 7: ses
# ses with random alpha values
jojoSESAlpha01 <- ses(jojo, initial="simple", alpha=0.01, h=1)
jojoSESAlpha05 <- ses(jojo, initial="simple", alpha=0.05, h=1)
jojoSESAlpha50 <- ses(jojo, initial="simple", alpha=0.50, h=1)
jojoSESAlpha95 <- ses(jojo, initial="simple", alpha=0.95, h=1)
jojoSESAlpha99 <- ses(jojo, initial="simple", alpha=0.99, h=1)
jojoSESAlpha01
jojoSESAlpha05
jojoSESAlpha50
jojoSESAlpha95
jojoSESAlpha99
# Chunk 8: sse
# sse calculation, source: http://stackoverflow.com/questions/31975699/exponential-smoothing-plotting-sse-vs-alpha
jojoSSEAlpha01 <- sum((jojo[,1] - fitted(jojoSESAlpha01)))
jojoSSEAlpha05 <- sum((jojo[,1] - fitted(jojoSESAlpha05)))
jojoSSEAlpha50 <- sum((jojo[,1] - fitted(jojoSESAlpha50)))
jojoSSEAlpha95 <- sum((jojo[,1] - fitted(jojoSESAlpha95)))
jojoSSEAlpha99 <- sum((jojo[,1] - fitted(jojoSESAlpha99)))
jojoSSEAlpha01
jojoSSEAlpha05
jojoSSEAlpha50
jojoSSEAlpha95
jojoSSEAlpha99
# Chunk 9: sse plot
# sse mass calculcation, source same as above.
for(i in seq(0, 1, by=0.1)) {
assign(paste("ses", i, sep = ""), ses(jojo, alpha=i, initial="simple"))
}
# initialize vector
sesAlpha = {}
sesAlpha[1] <- 0
sesAlpha[2] <- 0.1
sesAlpha[3] <- 0.2
sesAlpha[4] <- 0.3
sesAlpha[5] <- 0.4
sesAlpha[6] <- 0.5
sesAlpha[7] <- 0.6
sesAlpha[8] <- 0.7
sesAlpha[9] <- 0.8
sesAlpha[10] <- 0.9
sesAlpha[11] <- 1
# initialize vector
sesSSE = {}
sesSSE[1] <- ses0$model$SSE
sesSSE[2] <- ses0.1$model$SSE
sesSSE[3] <- ses0.2$model$SSE
sesSSE[4] <- ses0.3$model$SSE
sesSSE[5] <- ses0.4$model$SSE
sesSSE[6] <- ses0.5$model$SSE
sesSSE[7] <- ses0.6$model$SSE
sesSSE[8] <- ses0.7$model$SSE
sesSSE[9] <- ses0.8$model$SSE
sesSSE[10] <- ses0.9$model$SSE
sesSSE[11] <- ses1$model$SSE
plot(sesAlpha, sesSSE, type="o", col="black", xlab="Alpha", ylab="SSE")
# Chunk 10: optimal_alpha
# optimal alpha vs. Part B
jojoSESOptimalAlpha <- ses(jojo, initial="simple", alpha=NULL, h=4)
jojoSESAlpha01
jojoSESAlpha05
jojoSESAlpha50
jojoSESAlpha95
jojoSESAlpha99
jojoSESOptimalAlpha
# Chunk 11: optimal_initial
# optimal initial
jojoSESOptimalInitial <- ses(jojoTS, initial="optimal", alpha=NULL, h=4)
jojoSESOptimalAlpha
jojoSESOptimalInitial
# Chunk 12: acf pacf
# acf & pacf
jojoNormalDiff <- diff(jojoTS)
acf(jojoNormalDiff, xlab="LAG, Quarterly Earnings per Share")
pacf(jojoNormalDiff, xlab="LAG, Quarterly Earnings per Share")
#acf2(jojoManualDiff, xlab="LAG, Quarterly Earnings per Share")
# Chunk 13: arima
# fit arima
jojoARIMA <- arima(jojoTS, order=c(1,1,2))
jojoARIMA2 <- arima(jojoTS, order=c(1,1,1))
jojoARIMA3 <- arima(jojoTS, order=c(2,1,1))
jojoARIMA4 <- arima(jojoTS, order=c(2,1,2))
jojoARIMA
jojoARIMA2
jojoARIMA3
jojoARIMA4
# Chunk 14: residuals
# plot residuals
tsdiag(jojoARIMA)
plot(jojoARIMA$residuals, type="p")
acf(jojoNormalDiff)
acf(jojoARIMA$residuals)
pacf(jojoNormalDiff)
pacf(jojoARIMA$residuals)
# Chunk 15: predict
# predict given and my own
jojoARIMAGiven <- arima(jojoTS, order=c(1,0,1), method="ML") # 1,0,1
jojoARIMAPredictGiven <- predict(jojoARIMAPredictGiven, n.head=4)
jojoARIMAPredictGiven
jojoARIMAPredict <- predict(jojoARIMA, n.ahead=4) # 1,1,2
jojoARIMAPredict
# Chunk 1: setup
# libraries
library(stats)
library(tseries)
library(forecast)
library(ggplot2)
library(astsa)
library(dplyr)
# set working directory
setwd("C:/Users/Warlon/Documents/R/hw2")
# Chunk 2: plot
# load jojo data
jojo <- read.table("jojo.dat")
jojoTS <- ts(jojo, frequency = 4)
# plot it, all observations (84)
plot(1:84, jojoTS, type="o", col="black", xlab="Quarter", ylab="Quarterly Earnings per Share")
# Chunk 3: stationary
# diff, observe lag, diff lag
jojoDiff <- diff(jojoTS)
acf(jojoDiff)
jojoDiff <- diff(jojoDiff, lag=4)
acf(jojoDiff)
plot(jojoDiff, type="o", col="black", xlab="Quarter", ylab="Quarterly Earnings per Share")
# another way, source: https://anomaly.io/seasonal-trend-decomposition-in-r/
#jojoTS2 <- ts(as.vector(t(jojo)), frequency=4) # make univariate
#jojoSTL <- stl(jojoTS2, "periodic")
#jojoRandom <- jojoSTL$time.series[,3] # by Loess
#acf(jojoRandom)
#plot(jojoRandom)
# Chunk 4: code
# differencing, source: https://www.otexts.org/fpp/8/1
temp <- jojoTS
jojoManualDiff = {}
for (i in 2:84) {
jojoManualDiff[i] = temp[i] - temp[i-1]
}
jojoManualDiff <- na.omit(jojoManualDiff)
acf(jojoManualDiff)
plot(jojoManualDiff, type="o", col="black", xlab="Quarter", ylab="Quarterly Earnings per Share")
# Chunk 5: acf
# acf
acf(jojoDiff)
acf(jojoManualDiff)
# Chunk 6: adf
# adf
adf.test(jojoDiff)
adf.test(jojoManualDiff)
# Chunk 7: ses
# ses with random alpha values
jojoSESAlpha01 <- ses(jojo, initial="simple", alpha=0.01, h=1)
jojoSESAlpha05 <- ses(jojo, initial="simple", alpha=0.05, h=1)
jojoSESAlpha50 <- ses(jojo, initial="simple", alpha=0.50, h=1)
jojoSESAlpha95 <- ses(jojo, initial="simple", alpha=0.95, h=1)
jojoSESAlpha99 <- ses(jojo, initial="simple", alpha=0.99, h=1)
jojoSESAlpha01
jojoSESAlpha05
jojoSESAlpha50
jojoSESAlpha95
jojoSESAlpha99
# Chunk 8: sse
# sse calculation, source: http://stackoverflow.com/questions/31975699/exponential-smoothing-plotting-sse-vs-alpha
jojoSSEAlpha01 <- sum((jojo[,1] - fitted(jojoSESAlpha01)))
jojoSSEAlpha05 <- sum((jojo[,1] - fitted(jojoSESAlpha05)))
jojoSSEAlpha50 <- sum((jojo[,1] - fitted(jojoSESAlpha50)))
jojoSSEAlpha95 <- sum((jojo[,1] - fitted(jojoSESAlpha95)))
jojoSSEAlpha99 <- sum((jojo[,1] - fitted(jojoSESAlpha99)))
jojoSSEAlpha01
jojoSSEAlpha05
jojoSSEAlpha50
jojoSSEAlpha95
jojoSSEAlpha99
# Chunk 9: sse plot
# sse mass calculcation, source same as above.
for(i in seq(0, 1, by=0.1)) {
assign(paste("ses", i, sep = ""), ses(jojo, alpha=i, initial="simple"))
}
# initialize vector
sesAlpha = {}
sesAlpha[1] <- 0
sesAlpha[2] <- 0.1
sesAlpha[3] <- 0.2
sesAlpha[4] <- 0.3
sesAlpha[5] <- 0.4
sesAlpha[6] <- 0.5
sesAlpha[7] <- 0.6
sesAlpha[8] <- 0.7
sesAlpha[9] <- 0.8
sesAlpha[10] <- 0.9
sesAlpha[11] <- 1
# initialize vector
sesSSE = {}
sesSSE[1] <- ses0$model$SSE
sesSSE[2] <- ses0.1$model$SSE
sesSSE[3] <- ses0.2$model$SSE
sesSSE[4] <- ses0.3$model$SSE
sesSSE[5] <- ses0.4$model$SSE
sesSSE[6] <- ses0.5$model$SSE
sesSSE[7] <- ses0.6$model$SSE
sesSSE[8] <- ses0.7$model$SSE
sesSSE[9] <- ses0.8$model$SSE
sesSSE[10] <- ses0.9$model$SSE
sesSSE[11] <- ses1$model$SSE
plot(sesAlpha, sesSSE, type="o", col="black", xlab="Alpha", ylab="SSE")
# Chunk 10: optimal_alpha
# optimal alpha vs. Part B
jojoSESOptimalAlpha <- ses(jojo, initial="simple", alpha=NULL, h=4)
jojoSESAlpha01
jojoSESAlpha05
jojoSESAlpha50
jojoSESAlpha95
jojoSESAlpha99
jojoSESOptimalAlpha
# Chunk 11: optimal_initial
# optimal initial
jojoSESOptimalInitial <- ses(jojoTS, initial="optimal", alpha=NULL, h=4)
jojoSESOptimalAlpha
jojoSESOptimalInitial
# Chunk 12: acf pacf
# acf & pacf
jojoNormalDiff <- diff(jojoTS)
acf(jojoNormalDiff, xlab="LAG, Quarterly Earnings per Share")
pacf(jojoNormalDiff, xlab="LAG, Quarterly Earnings per Share")
#acf2(jojoManualDiff, xlab="LAG, Quarterly Earnings per Share")
# Chunk 13: arima
# fit arima
jojoARIMA <- arima(jojoTS, order=c(1,1,2))
jojoARIMA2 <- arima(jojoTS, order=c(1,1,1))
jojoARIMA3 <- arima(jojoTS, order=c(2,1,1))
jojoARIMA4 <- arima(jojoTS, order=c(2,1,2))
jojoARIMA
jojoARIMA2
jojoARIMA3
jojoARIMA4
# Chunk 14: residuals
# plot residuals
tsdiag(jojoARIMA)
plot(jojoARIMA$residuals, type="p")
acf(jojoNormalDiff)
acf(jojoARIMA$residuals)
pacf(jojoNormalDiff)
pacf(jojoARIMA$residuals)
# Chunk 15: predict
# predict given and my own
jojoARIMAGiven <- arima(jojoTS, order=c(1,0,1), method="ML") # 1,0,1
jojoARIMAPredictGiven <- predict(jojoARIMAGiven, n.head=4)
jojoARIMAPredictGiven
jojoARIMAPredict <- predict(jojoARIMA, n.ahead=4) # 1,1,2
jojoARIMAPredict
# Chunk 1: setup
# libraries
library(stats)
library(tseries)
library(forecast)
library(ggplot2)
library(astsa)
library(dplyr)
# set working directory
setwd("C:/Users/Warlon/Documents/R/hw2")
# Chunk 2: plot
# load jojo data
jojo <- read.table("jojo.dat")
jojoTS <- ts(jojo, frequency = 4)
# plot it, all observations (84)
plot(1:84, jojoTS, type="o", col="black", xlab="Quarter", ylab="Quarterly Earnings per Share")
# Chunk 3: stationary
# diff, observe lag, diff lag
jojoDiff <- diff(jojoTS)
acf(jojoDiff)
jojoDiff <- diff(jojoDiff, lag=4)
acf(jojoDiff)
plot(jojoDiff, type="o", col="black", xlab="Quarter", ylab="Quarterly Earnings per Share")
# another way, source: https://anomaly.io/seasonal-trend-decomposition-in-r/
#jojoTS2 <- ts(as.vector(t(jojo)), frequency=4) # make univariate
#jojoSTL <- stl(jojoTS2, "periodic")
#jojoRandom <- jojoSTL$time.series[,3] # by Loess
#acf(jojoRandom)
#plot(jojoRandom)
# Chunk 4: code
# differencing, source: https://www.otexts.org/fpp/8/1
temp <- jojoTS
jojoManualDiff = {}
for (i in 2:84) {
jojoManualDiff[i] = temp[i] - temp[i-1]
}
jojoManualDiff <- na.omit(jojoManualDiff)
acf(jojoManualDiff)
plot(jojoManualDiff, type="o", col="black", xlab="Quarter", ylab="Quarterly Earnings per Share")
# Chunk 5: acf
# acf
acf(jojoDiff)
acf(jojoManualDiff)
# Chunk 6: adf
# adf
adf.test(jojoDiff)
adf.test(jojoManualDiff)
# Chunk 7: ses
# ses with random alpha values
jojoSESAlpha01 <- ses(jojo, initial="simple", alpha=0.01, h=1)
jojoSESAlpha05 <- ses(jojo, initial="simple", alpha=0.05, h=1)
jojoSESAlpha50 <- ses(jojo, initial="simple", alpha=0.50, h=1)
jojoSESAlpha95 <- ses(jojo, initial="simple", alpha=0.95, h=1)
jojoSESAlpha99 <- ses(jojo, initial="simple", alpha=0.99, h=1)
jojoSESAlpha01
jojoSESAlpha05
jojoSESAlpha50
jojoSESAlpha95
jojoSESAlpha99
# Chunk 8: sse
# sse calculation, source: http://stackoverflow.com/questions/31975699/exponential-smoothing-plotting-sse-vs-alpha
jojoSSEAlpha01 <- sum((jojo[,1] - fitted(jojoSESAlpha01)))
jojoSSEAlpha05 <- sum((jojo[,1] - fitted(jojoSESAlpha05)))
jojoSSEAlpha50 <- sum((jojo[,1] - fitted(jojoSESAlpha50)))
jojoSSEAlpha95 <- sum((jojo[,1] - fitted(jojoSESAlpha95)))
jojoSSEAlpha99 <- sum((jojo[,1] - fitted(jojoSESAlpha99)))
jojoSSEAlpha01
jojoSSEAlpha05
jojoSSEAlpha50
jojoSSEAlpha95
jojoSSEAlpha99
# Chunk 9: sse plot
# sse mass calculcation, source same as above.
for(i in seq(0, 1, by=0.1)) {
assign(paste("ses", i, sep = ""), ses(jojo, alpha=i, initial="simple"))
}
# initialize vector
sesAlpha = {}
sesAlpha[1] <- 0
sesAlpha[2] <- 0.1
sesAlpha[3] <- 0.2
sesAlpha[4] <- 0.3
sesAlpha[5] <- 0.4
sesAlpha[6] <- 0.5
sesAlpha[7] <- 0.6
sesAlpha[8] <- 0.7
sesAlpha[9] <- 0.8
sesAlpha[10] <- 0.9
sesAlpha[11] <- 1
# initialize vector
sesSSE = {}
sesSSE[1] <- ses0$model$SSE
sesSSE[2] <- ses0.1$model$SSE
sesSSE[3] <- ses0.2$model$SSE
sesSSE[4] <- ses0.3$model$SSE
sesSSE[5] <- ses0.4$model$SSE
sesSSE[6] <- ses0.5$model$SSE
sesSSE[7] <- ses0.6$model$SSE
sesSSE[8] <- ses0.7$model$SSE
sesSSE[9] <- ses0.8$model$SSE
sesSSE[10] <- ses0.9$model$SSE
sesSSE[11] <- ses1$model$SSE
plot(sesAlpha, sesSSE, type="o", col="black", xlab="Alpha", ylab="SSE")
# Chunk 10: optimal_alpha
# optimal alpha vs. Part B
jojoSESOptimalAlpha <- ses(jojo, initial="simple", alpha=NULL, h=4)
jojoSESAlpha01
jojoSESAlpha05
jojoSESAlpha50
jojoSESAlpha95
jojoSESAlpha99
jojoSESOptimalAlpha
# Chunk 11: optimal_initial
# optimal initial
jojoSESOptimalInitial <- ses(jojoTS, initial="optimal", alpha=NULL, h=4)
jojoSESOptimalAlpha
jojoSESOptimalInitial
# Chunk 12: acf pacf
# acf & pacf
jojoNormalDiff <- diff(jojoTS)
acf(jojoNormalDiff, xlab="LAG, Quarterly Earnings per Share")
pacf(jojoNormalDiff, xlab="LAG, Quarterly Earnings per Share")
#acf2(jojoManualDiff, xlab="LAG, Quarterly Earnings per Share")
# Chunk 13: arima
# fit arima
jojoARIMA <- arima(jojoTS, order=c(1,1,2))
jojoARIMA2 <- arima(jojoTS, order=c(1,1,1))
jojoARIMA3 <- arima(jojoTS, order=c(2,1,1))
jojoARIMA4 <- arima(jojoTS, order=c(2,1,2))
jojoARIMA
jojoARIMA2
jojoARIMA3
jojoARIMA4
# Chunk 14: residuals
# plot residuals
tsdiag(jojoARIMA)
plot(jojoARIMA$residuals, type="p")
acf(jojoNormalDiff)
acf(jojoARIMA$residuals)
pacf(jojoNormalDiff)
pacf(jojoARIMA$residuals)
# Chunk 15: predict
# predict given and my own
jojoARIMAGiven <- arima(jojoTS, order=c(1,0,1), method="ML") # 1,0,1
jojoARIMAPredictGiven <- predict(jojoARIMAGiven, n.ahead=4)
jojoARIMAPredictGiven
jojoARIMAPredict <- predict(jojoARIMA, n.ahead=4) # 1,1,2
jojoARIMAPredict
# Chunk 1: setup
setwd("C:/Users/Warlon/Documents/R/hw1")
# Chunk 2: setup
df <- read.csv("data.txt") # read in data.txt stored locally in same folder as hw.R. df is short for data frame.
region1 <- df$HHS.Region.1..CT..ME..MA..NH..RI..VT. # $ sign is an operator to access column. After $hhs I have auto completion to find Region.
region10 <- df$HHS.Region.10..AK..ID..OR..WA. # After $hhs I have auto completion to find Region.
summary(region1) # print descriptive statistics
summary(region10) # print descriptive statistics
date <- as.Date(df$Date) # get date to numeric
plot(date, region1, type="l", col = "red", main="Flu Trends of Region 1 (Red) and Region 10 (Blue)", xlab = "Date", ylab = "Search Queries") # parameters here: http://stat.ethz.ch/R-manual/R-patched/library/graphics/html/plot.html
lines(date, region10, col="blue") # multiple lines in one graph here: http://stackoverflow.com/questions/2564258/plot-two-graphs-in-same-plot-in-r
# we also answer the task by plotting a visual, where it may be better to look at where the data spikes in the event of outliers.
